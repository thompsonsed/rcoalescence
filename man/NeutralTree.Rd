% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/RcppCoalescenceModule.R
\name{NeutralTree}
\alias{NeutralTree}
\title{Simulate neutral models on a variety of landscape conformations}
\description{
Four classes are provided here, \link{Tree}, \link{SpatialTree},
\link{ProtractedTree} and \link{ProtractedSpatialTree}, for non-spatial/spatial and
non-protracted/protracted simulations. The process for setting up, running and analysing
simulations are the same, as described below.
}
\section{Non-spatial Models}{

Run non-spatial neutral models. Here no map files are required, simply set up the
simulation and run. Dispersal parameters (sigma, tau, etc) are not relevant for this class.
}

\section{Spatial Models}{

Run spatial neutral models. You must provide map files which provide the spatial density for the
simulation. Additional maps are optional.
}

\section{Protracted Non-spatial Models}{

Run non-spatial neutral models with protracted speciation. Here no map files are required, but
the protracted speciation parameters should be specified.
}

\section{Protracted Spatial Models}{

Runs spatially-explicit neutral models with protracted speciation. Requires both the protracted
speciation parameters and map files defining spatial density.
}

\section{Simulation parameters}{

These parameters are required at simulation time. The vast majority have defaults,
which are defined in setSimulationParameters()
\itemize{
\item \emph{task}: the task reference number
\item \emph{seed}: the seed for setting random number generation
\item \emph{output_directory}: the path to the folder for storing simulation files
\item \emph{max_time}: the maximum number of seconds to simulate for before pausing
\item \emph{desired_specnum}: the desired number of species to aim for
\item \emph{times_list}: list of temporal sampling points
\item \emph{uses_logging}: if true, all outputs are written to console
\item \emph{deme}: the number of individuals per cell
\item \emph{deme_sample}: the global sampling proportion
\item \emph{speciation_rate}: the minimum speciation rate for the simulation
}
}

\section{Spatial parameters}{

These include dispersal parameters and maps files
\itemize{
\item \emph{sigma}: mean dispersal: distance for a normally-distributed dispersal kernel
\item \emph{dispersal_method}: the method of dispersal from "normal", "fat-tailed", "uniform" and "norm-uniform"
\item \emph{tau}: the tau parameter for a fat-tailed dispersal kernel
\item \emph{m_prob}: the probability of dispersing uniformly for the norm-uniform dispersal kernel
\item \emph{cutoff}: the maximum distance dispersal occurs for in a uniform dispersal kernel
\item \emph{dispersal_relative_cost}: the relative cost of moving through non-forest
\item \emph{restrict_self}: if true, prevents individuals from dispersing from their own cell
\item \emph{landscape_type}: type of landscape from "closed", "infinite" and "tiled"
\item \emph{dispersal_file}: a map of dispersal probabilities
\item \emph{reproduction_file}: a map of reproduction probabilies
\item \emph{fine_map_file}: fine resolution density map
\item \emph{coarse_map_file}: coarse resolution density map
\item \emph{sample_mask_file}: spatial sampling mask
\item \emph{grid_x_size}: x dimension of the grid
\item \emph{grid_y_size}: y dimension of the grid
\item \emph{sample_x_size}: x dimension of the sample mask
\item \emph{sample_y_size}: y dimension of the sample mask
\item \emph{sample_x_offset}: the x offset of the sample mask from the grid
\item \emph{sample_y_offset}: the y offset of the sample mask from the grid
\item \emph{fine_map_x_size}: the x dimension of the fine map
\item \emph{fine_map_y_size}: the y dimension of the fine map
\item \emph{fine_map_x_offset}: the x offset of the fine map from the sample mask
\item \emph{fine_map_y_offset}: the y offset of the fine map from the sample mask
\item \emph{coarse_map_x_size}: the x dimension of the coarse map
\item \emph{coarse_map_y_size}: the y dimension of the coarse map
\item \emph{coarse_map_x_offset}: the x offset of the coarse map from the fine map
\item \emph{coarse_map_y_offset}: the y offset of the coarse map from the fine map
\item \emph{coarse_map_scale}: the relative scale of the coarse map
\item \emph{uses_spatial_sampling}: if true, the sample mask defines relative sampling proportions across the map
\item \emph{historical_fine_map}: the historical fine map file
\item \emph{historical_coarse_map}: the historical coarse map file
\item \emph{gen_since_historical}: the number of generations since the historical state
\item \emph{habitat_change_rate}: the rate of change to the historical map
}
}

\section{Protracted speciation parameters}{

These parameters should match pairwise, i.e. the nth item in min_speciation_gens should go with
the nth item in max_speciation_gens
\itemize{
\item \emph{min_speciation_gens}: list of minimum number of generations required before speciation
\item \emph{max_speciation_gens}: list of maximum number of generations required before speciation
}
}

\section{Post-simulation parameters}{

These are for rebuilding the coalescence tree under different conditions.
\itemize{
\item \emph{output_file}: the directory to output to, defaults to "none"
\item \emph{use_spatial}: if true, records full spatial locations of all individuals. Default=FALSE
\item \emph{sample_file}: supply a mask for defining spatial sampling. Default="null"
\item \emph{use_fragments}: supply a file containing fragment coordinates, or TRUE to let program calculate fragments
\item \emph{speciation_rates}: list of speciation rates to apply
\item \emph{times_list}: list of times to calculate coalescence tree for
\item \emph{min_speciation_gens}: list of the minimum number of generations required before speciation
\item \emph{max_speciation_gens}: list of the maximum number of generations required before speciation
\item \emph{metacommunity_size}: the number of individuals in the metacommunity
\item \emph{metacommunity_speciation_rate}: the effective speciation rate of the metacommunity
}
}

\examples{
# Example simulation using the supplied dimensions and offsets, with logging
library(rcoalescence)
simulation <- SpatialTree$new()
simulation$setSimulationParameters(seed=9, task =1, output_directory = "output", 
                                   speciation_rate = 0.5, sigma=2 * (2 ** 0.5), deme=1, 
                                   deme_sample = 0.1, 
                                   fine_map_file = "inst/extdata/sample/example_fine.tif",
                                   fine_map_x_size = 13, fine_map_y_size = 13, 
                                   coarse_map_file="inst/extdata/sample/example_coarse.tif",
                                   coarse_map_x_size = 35, coarse_map_y_size = 41, 
                                   coarse_map_x_offset = 11, coarse_map_y_offset = 14,
                                   sample_mask_file = "inst/extdata/sample/example_mask.tif", 
                                   sample_x_size = 13, sample_y_size = 13, uses_logging = TRUE)
simulation$runSimulation()

# Or rely on automatic detection of map dimensions and offsets, without logging
simulation <- SpatialTree$new()
simulation$setSimulationParameters(seed=9, task =1, output_directory = "output",
                                   speciation_rate = 0.001, 
                                   sigma=2 * (2 ** 0.5), deme=1, deme_sample = 0.1, 
                                   fine_map_file = "inst/extdata/sample/example_fine.tif", 
                                   coarse_map_file="inst/extdata/sample/example_coarse.tif",
                                   sample_mask_file = "inst/extdata/sample/example_mask.tif",
                                   uses_logging = FALSE)
simulation$runSimulation()

# Apply additional speciation rates
simulation$applySpeciationRates(speciation_rates = c(0.001, 0.7, 0.8))
# Output to a database
simulation$output()
# Get the species richness
simulation$getSpeciesRichness(1)
# Get the species abundances (last 5)
tail(simulation$getSpeciesAbundances(1), 5)


# Example simulation for non-spatial models
library(rcoalescence)
simulation <- Tree$new()
# Simulate 100 individuals
simulation$setSimulationParameters(seed=10, task =1, output_directory = "output", 
                                   speciation_rate = 0.5, deme=100, uses_logging = TRUE)
simulation$runSimulation()

# Apply additional speciation rates
simulation$applySpeciationRates(speciation_rates = c(0.001, 0.7, 0.8))
# Output to a database
simulation$output()
# Get the species richness
simulation$getSpeciesRichness(1)
# Get the species abundances (last 5)
tail(simulation$getSpeciesAbundances(1), 5)

# Example simulation for non-spatial models with protracted speciation
library(rcoalescence)
simulation <- ProtractedTree$new()
# Simulate 100 individuals
simulation$setSimulationParameters(seed=11, task =1, output_directory = "output", 
                                   speciation_rate = 0.5, deme=100, uses_logging = TRUE,
                                   min_speciation_gen=100, max_speciation_gen = 1000)
simulation$runSimulation()

# Apply additional speciation rates
simulation$applySpeciationRates(speciation_rates = c(0.001, 0.7, 0.8),
                                min_speciation_gens = c(10, 20, 20), 
                                max_speciation_gens = c(500, 500, 1000))
# Output to a database
simulation$output()
# Get the species richness
simulation$getSpeciesRichness(1)
# Get the species abundances (last 5)
tail(simulation$getSpeciesAbundances(1), 5)

# Example simulation using the supplied dimensions and offsets, with logging
library(rcoalescence)
simulation <- ProtractedSpatialTree$new()
simulation$setSimulationParameters(seed=9, task =1, output_directory = "output", 
                                   speciation_rate = 0.5, sigma=2 * (2 ** 0.5), deme=1, 
                                   deme_sample = 0.1, 
                                   fine_map_file = "inst/extdata/sample/example_fine.tif",
                                   fine_map_x_size = 13, fine_map_y_size = 13, 
                                   coarse_map_file="inst/extdata/sample/example_coarse.tif",
                                   coarse_map_x_size = 35, coarse_map_y_size = 41, 
                                   coarse_map_x_offset = 11, coarse_map_y_offset = 14,
                                   sample_mask_file = "inst/extdata/sample/example_mask.tif", 
                                   sample_x_size = 13, sample_y_size = 13, uses_logging = TRUE,
                                   min_speciation_gen=100, max_speciation_gen = 1000)
simulation$runSimulation()

# Or rely on automatic detection of map dimensions and offsets, without logging
simulation <- SpatialTree$new()
simulation$setSimulationParameters(seed=9, task =1, output_directory = "output",
                                   speciation_rate = 0.001, 
                                   sigma=2 * (2 ** 0.5), deme=1, deme_sample = 0.1, 
                                   fine_map_file = "inst/extdata/sample/example_fine.tif", 
                                   coarse_map_file="inst/extdata/sample/example_coarse.tif",
                                   sample_mask_file = "inst/extdata/sample/example_mask.tif",
                                   uses_logging = FALSE,
                                   min_speciation_gen=100, max_speciation_gen = 1000)
simulation$runSimulation()
# Apply additional speciation rates
simulation$applySpeciationRates(speciation_rates = c(0.001, 0.7, 0.8),
                                min_speciation_gens = c(10, 20, 20), 
                                max_speciation_gens = c(500, 500, 1000))
# Output to a database
simulation$output()
# Get the species richness
simulation$getSpeciesRichness(1)
# Get the species abundances (last 5)
tail(simulation$getSpeciesAbundances(1), 5)

}
